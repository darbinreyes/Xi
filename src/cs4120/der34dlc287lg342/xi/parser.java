
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 13 22:12:32 EDT 2011
//----------------------------------------------------

package cs4120.der34dlc287lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.CompilationException;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.der34dlc287lg342.xi.ast.*;
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 13 22:12:32 EDT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\041\003\000\002\041" +
    "\003\000\002\012\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\005\003\000\002\005" +
    "\003\000\002\006\006\000\002\006\006\000\002\040\002" +
    "\000\002\040\003\000\002\040\005\000\002\007\006\000" +
    "\002\010\004\000\002\010\006\000\002\010\007\000\002" +
    "\011\003\000\002\011\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\025\003\000\002\025\003\000\002\016\007\000\002" +
    "\016\011\000\002\017\007\000\002\020\004\000\002\020" +
    "\003\000\002\020\004\000\002\021\003\000\002\021\005" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\006\000\002\024\003\000\002\024\004\000\002" +
    "\023\003\000\002\023\004\000\002\033\003\000\002\033" +
    "\003\000\002\032\002\000\002\032\003\000\002\026\006" +
    "\000\002\035\002\000\002\035\006\000\002\030\003\000" +
    "\002\030\003\000\002\036\003\000\002\036\005\000\002" +
    "\036\005\000\002\027\005\000\002\014\003\000\002\014" +
    "\003\000\002\013\006\000\002\013\006\000\002\031\005" +
    "\000\002\031\005\000\002\043\004\000\002\043\005\000" +
    "\002\037\002\000\002\037\003\000\002\037\005\000\002" +
    "\034\002\000\002\034\005\000\002\034\006\000\002\042" +
    "\010\000\002\003\003\000\002\003\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\006\004\005\023\006\001\002\000\006\002" +
    "\244\004\005\001\002\000\102\004\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\001\002\000\004\004\005\001" +
    "\002\000\004\046\015\001\002\000\006\004\005\023\006" +
    "\001\002\000\006\004\uffa3\023\uffa3\001\002\000\006\002" +
    "\uffa0\004\uffa0\001\002\000\006\002\uffa1\004\uffa1\001\002" +
    "\000\006\004\uffa2\023\uffa2\001\002\000\010\004\005\047" +
    "\uffaa\053\uffaa\001\002\000\006\047\133\053\132\001\002" +
    "\000\006\047\uffa9\053\uffa9\001\002\000\004\052\021\001" +
    "\002\000\006\012\024\013\023\001\002\000\040\004\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024\uffba\043" +
    "\uffba\044\uffba\047\uffba\050\uffba\051\uffba\053\uffba\054\uffba" +
    "\055\uffba\001\002\000\040\004\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\024\uffbe\043\uffbe\044\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002\000" +
    "\040\004\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\024\uffbf\043\uffbf\044\uffbf\047\uffbf\050\uffbf\051\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\001\002\000\040\004\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\043\uffbb\044" +
    "\026\047\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\030\004\005\005\035\006\046\007\045\010" +
    "\034\011\042\024\041\026\043\032\032\045\uffbd\046\027" +
    "\001\002\000\030\004\005\005\035\006\046\007\045\010" +
    "\034\011\042\024\041\026\043\032\032\046\027\047\121" +
    "\001\002\000\026\004\005\005\035\006\046\007\045\010" +
    "\034\011\042\024\041\026\043\032\032\046\027\001\002" +
    "\000\040\025\057\026\054\027\064\030\055\031\063\033" +
    "\066\034\071\035\061\036\065\037\053\040\067\041\056" +
    "\042\062\044\060\045\uffbc\001\002\000\026\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\024\uffe6\026\uffe6" +
    "\032\uffe6\046\uffe6\001\002\000\072\004\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\045\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\053\uffe9\054\uffe9\055\uffe9\001" +
    "\002\000\072\004\000\016\000\017\000\020\000\021\000" +
    "\022\000\024\000\025\000\026\000\027\000\030\000\031" +
    "\000\033\000\034\000\035\000\036\000\037\000\040\000" +
    "\041\000\042\000\044\000\045\000\047\000\050\000\051" +
    "\000\053\000\054\000\055\000\001\002\000\072\004\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\044" +
    "\uffec\045\uffec\047\uffec\050\uffec\051\uffec\053\uffec\054\uffec" +
    "\055\uffec\001\002\000\072\004\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\044\uffef\045\uffef\047\uffef" +
    "\050\uffef\051\uffef\053\uffef\054\uffef\055\uffef\001\002\000" +
    "\074\004\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\044\uffe8\045\uffe8\046\111\047\uffe8\050\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\001\002\000\072\004\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044" +
    "\uffea\045\uffea\047\uffea\050\uffea\051\uffea\053\uffea\054\uffea" +
    "\055\uffea\001\002\000\004\046\051\001\002\000\072\004" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff" +
    "\044\uffff\045\uffff\047\uffff\050\uffff\051\uffff\053\uffff\054" +
    "\uffff\055\uffff\001\002\000\026\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\024\uffe5\026\uffe5\032\uffe5\046" +
    "\uffe5\001\002\000\072\004\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\044\uffeb\045\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\053\uffeb\054\uffeb\055\uffeb\001\002\000\072" +
    "\004\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\044\uffee\045\uffee\047\uffee\050\uffee\051\uffee\053\uffee" +
    "\054\uffee\055\uffee\001\002\000\072\004\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\044\uffed\045\uffed" +
    "\047\uffed\050\uffed\051\uffed\053\uffed\054\uffed\055\uffed\001" +
    "\002\000\004\045\050\001\002\000\040\004\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\043\uffb9\044" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\001\002\000\026\004\005\005\035\006\046\007\045\010" +
    "\034\011\042\024\041\026\043\032\032\046\027\001\002" +
    "\000\040\025\057\026\054\027\064\030\055\031\063\033" +
    "\066\034\071\035\061\036\065\037\053\040\067\041\056" +
    "\042\062\044\060\047\070\001\002\000\026\004\005\005" +
    "\035\006\046\007\045\010\034\011\042\024\041\026\043" +
    "\032\032\046\027\001\002\000\026\004\005\005\035\006" +
    "\046\007\045\010\034\011\042\024\041\026\043\032\032" +
    "\046\027\001\002\000\026\004\005\005\035\006\046\007" +
    "\045\010\034\011\042\024\041\026\043\032\032\046\027" +
    "\001\002\000\026\004\005\005\035\006\046\007\045\010" +
    "\034\011\042\024\041\026\043\032\032\046\027\001\002" +
    "\000\026\004\005\005\035\006\046\007\045\010\034\011" +
    "\042\024\041\026\043\032\032\046\027\001\002\000\026" +
    "\004\005\005\035\006\046\007\045\010\034\011\042\024" +
    "\041\026\043\032\032\046\027\001\002\000\026\004\005" +
    "\005\035\006\046\007\045\010\034\011\042\024\041\026" +
    "\043\032\032\046\027\001\002\000\026\004\005\005\035" +
    "\006\046\007\045\010\034\011\042\024\041\026\043\032" +
    "\032\046\027\001\002\000\026\004\005\005\035\006\046" +
    "\007\045\010\034\011\042\024\041\026\043\032\032\046" +
    "\027\001\002\000\026\004\005\005\035\006\046\007\045" +
    "\010\034\011\042\024\041\026\043\032\032\046\027\001" +
    "\002\000\026\004\005\005\035\006\046\007\045\010\034" +
    "\011\042\024\041\026\043\032\032\046\027\001\002\000" +
    "\026\004\005\005\035\006\046\007\045\010\034\011\042" +
    "\024\041\026\043\032\032\046\027\001\002\000\026\004" +
    "\005\005\035\006\046\007\045\010\034\011\042\024\041" +
    "\026\043\032\032\046\027\001\002\000\072\004\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3" +
    "\045\uffe3\047\uffe3\050\uffe3\051\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\001\002\000\026\004\005\005\035\006\046\007\045" +
    "\010\034\011\042\024\041\026\043\032\032\046\027\001" +
    "\002\000\072\004\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\024\ufff9\025\057\026\054\027\064\030\055\031" +
    "\063\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\044\060\045\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\001\002\000\072\004\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc\025" +
    "\057\026\054\027\064\030\055\031\063\033\066\034\071" +
    "\035\061\036\065\037\053\040\ufffc\041\056\042\062\044" +
    "\060\045\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\001\002\000\072\004\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\024\ufff7\025\057\026\054\027\064" +
    "\030\055\031\063\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\044\060\045\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\001\002\000" +
    "\072\004\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\024\ufff8\025\057\026\054\027\064\030\055\031\063\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\044\060\045\ufff8\047\ufff8\050\ufff8\051\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\001\002\000\072\004\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\044\060\045" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\001\002\000\072\004\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\044\060\045\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\053\ufff1\054\ufff1\055\ufff1\001\002\000\072\004" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa" +
    "\025\057\026\054\027\064\030\055\031\063\033\066\034" +
    "\071\035\061\036\065\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\044\060\045\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\001\002\000\072\004\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\024\ufff6\025\057\026\054\027" +
    "\064\030\055\031\063\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\044\060\045\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002" +
    "\000\040\025\057\026\054\027\064\030\055\031\063\033" +
    "\066\034\071\035\061\036\065\037\053\040\067\041\056" +
    "\042\062\044\060\045\103\001\002\000\072\004\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf" +
    "\045\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\001\002\000\072\004\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\064\030" +
    "\055\031\063\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\044\060\045\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\001\002\000\072" +
    "\004\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024" +
    "\ufffb\025\057\026\054\027\064\030\055\031\063\033\066" +
    "\034\071\035\061\036\065\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\044\060\045\ufffb\047\ufffb\050\ufffb\051\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\001\002\000\072\004\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\044\060\045\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\053\ufff2\054\ufff2\055\ufff2\001" +
    "\002\000\072\004\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\064\030\055\031" +
    "\063\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\044\060\045\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\001\002\000\072\004\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\025" +
    "\057\026\054\027\064\030\055\031\063\033\066\034\071" +
    "\035\061\036\065\037\ufffd\040\ufffd\041\056\042\062\044" +
    "\060\045\ufffd\047\ufffd\050\ufffd\051\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\001\002\000\032\004\005\005\035\006\046\007" +
    "\045\010\034\011\042\024\041\026\043\032\032\046\027" +
    "\047\uffe2\053\uffe2\001\002\000\042\025\057\026\054\027" +
    "\064\030\055\031\063\033\066\034\071\035\061\036\065" +
    "\037\053\040\067\041\056\042\062\044\060\047\uffe1\053" +
    "\uffe1\001\002\000\006\047\115\053\114\001\002\000\026" +
    "\004\005\005\035\006\046\007\045\010\034\011\042\024" +
    "\041\026\043\032\032\046\027\001\002\000\072\004\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044" +
    "\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\001\002\000\042\025\057\026\054\027\064\030" +
    "\055\031\063\033\066\034\071\035\061\036\065\037\053" +
    "\040\067\041\056\042\062\044\060\047\uffe0\053\uffe0\001" +
    "\002\000\072\004\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\024\ufff0\025\057\026\054\027\064\030\055\031" +
    "\063\033\066\034\071\035\061\036\065\037\053\040\067" +
    "\041\056\042\062\044\060\045\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\001\002\000\042\025\057" +
    "\026\054\027\064\030\055\031\063\033\066\034\071\035" +
    "\061\036\065\037\053\040\067\041\056\042\062\044\060" +
    "\047\123\053\122\001\002\000\072\004\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044\uffde\045\uffde" +
    "\047\uffde\050\uffde\051\uffde\053\uffde\054\uffde\055\uffde\001" +
    "\002\000\030\004\005\005\035\006\046\007\045\010\034" +
    "\011\042\024\041\026\043\032\032\046\027\047\125\001" +
    "\002\000\072\004\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\001\002\000\042\025\057" +
    "\026\054\027\064\030\055\031\063\033\066\034\071\035" +
    "\061\036\065\037\053\040\067\041\056\042\062\044\060" +
    "\047\uffdb\053\uffdb\001\002\000\072\004\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd\055\uffdd\001" +
    "\002\000\006\047\130\053\127\001\002\000\026\004\005" +
    "\005\035\006\046\007\045\010\034\011\042\024\041\026" +
    "\043\032\032\046\027\001\002\000\072\004\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\045" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\001\002\000\042\025\057\026\054\027\064\030\055\031" +
    "\063\033\066\034\071\035\061\036\065\037\053\040\067" +
    "\041\056\042\062\044\060\047\uffda\053\uffda\001\002\000" +
    "\004\004\005\001\002\000\010\050\uffa7\052\135\053\uffa7" +
    "\001\002\000\006\050\142\053\140\001\002\000\006\012" +
    "\024\013\023\001\002\000\010\044\uffba\050\uffba\053\uffba" +
    "\001\002\000\010\044\026\050\uffa6\053\uffa6\001\002\000" +
    "\006\012\024\013\023\001\002\000\006\002\uffa4\004\uffa4" +
    "\001\002\000\024\004\005\016\151\020\147\021\162\022" +
    "\150\024\041\050\142\051\163\055\143\001\002\000\004" +
    "\053\235\001\002\000\030\004\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\024\uffd8\050\uffd8\051\uffd8\054\uffd8" +
    "\055\uffd8\001\002\000\006\043\230\044\231\001\002\000" +
    "\006\043\223\053\222\001\002\000\004\046\216\001\002" +
    "\000\032\004\005\005\035\006\046\007\045\010\034\011" +
    "\042\024\041\026\043\032\032\046\027\051\uffcb\054\uffcb" +
    "\001\002\000\004\046\204\001\002\000\030\004\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\050\uffd5" +
    "\051\uffd5\054\uffd5\055\uffd5\001\002\000\004\044\201\001" +
    "\002\000\034\004\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\024\uffd4\043\uffb6\050\uffd4\051\uffd4\053\uffb6\054" +
    "\uffd4\055\uffd4\001\002\000\024\004\005\016\151\020\147" +
    "\021\162\022\150\024\041\050\142\051\176\055\143\001" +
    "\002\000\030\004\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\024\uffd3\050\uffd3\051\uffd3\054\uffd3\055\uffd3\001" +
    "\002\000\032\004\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\024\uffd6\044\uffb1\050\uffd6\051\uffd6\054\uffd6\055" +
    "\uffd6\001\002\000\006\051\174\054\173\001\002\000\012" +
    "\043\171\044\uffb2\046\111\052\021\001\002\000\030\004" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7" +
    "\050\uffd7\051\uffd7\054\uffd7\055\uffd7\001\002\000\032\002" +
    "\uffc7\004\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\024\uffc7\050\uffc7\051\uffc7\054\uffc7\055\uffc7\001\002\000" +
    "\030\004\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\024\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2\001\002\000" +
    "\024\004\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1" +
    "\050\uffc1\051\uffc1\055\uffc1\001\002\000\030\004\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9\050\uffd9" +
    "\051\uffd9\054\uffd9\055\uffd9\001\002\000\026\004\uffc3\016" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\050\uffc3\051\uffc3" +
    "\054\170\055\uffc3\001\002\000\024\004\uffc2\016\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\024\uffc2\050\uffc2\051\uffc2\055\uffc2" +
    "\001\002\000\026\004\005\005\035\006\046\007\045\010" +
    "\034\011\042\024\041\026\043\032\032\046\027\001\002" +
    "\000\064\004\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\024\uffae\025\057\026\054\027\064\030\055\031\063" +
    "\033\066\034\071\035\061\036\065\037\053\040\067\041" +
    "\056\042\062\044\060\050\uffae\051\uffae\054\uffae\055\uffae" +
    "\001\002\000\006\051\uffca\054\uffca\001\002\000\032\002" +
    "\uffc6\004\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\024\uffc6\050\uffc6\051\uffc6\054\uffc6\055\uffc6\001\002\000" +
    "\006\051\200\054\173\001\002\000\032\002\uffc5\004\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\050" +
    "\uffc5\051\uffc5\054\uffc5\055\uffc5\001\002\000\024\004\uffc0" +
    "\016\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\050\uffc0\051" +
    "\uffc0\055\uffc0\001\002\000\032\002\uffc4\004\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\050\uffc4\051" +
    "\uffc4\054\uffc4\055\uffc4\001\002\000\026\004\005\005\035" +
    "\006\046\007\045\010\034\011\042\024\041\026\043\032" +
    "\032\046\027\001\002\000\040\025\057\026\054\027\064" +
    "\030\055\031\063\033\066\034\071\035\061\036\065\037" +
    "\053\040\067\041\056\042\062\044\060\045\203\001\002" +
    "\000\006\043\uffb0\044\uffb0\001\002\000\026\004\005\005" +
    "\035\006\046\007\045\010\034\011\042\024\041\026\043" +
    "\032\032\046\027\001\002\000\040\025\057\026\054\027" +
    "\064\030\055\031\063\033\066\034\071\035\061\036\065" +
    "\037\053\040\067\041\056\042\062\044\060\047\206\001" +
    "\002\000\020\004\005\016\151\020\147\021\162\024\041" +
    "\050\142\055\143\001\002\000\030\004\uffcf\016\uffcf\017" +
    "\210\020\uffcf\021\uffcf\022\uffcf\024\uffcf\050\uffcf\051\uffcf" +
    "\054\uffcf\055\uffcf\001\002\000\020\004\005\016\151\020" +
    "\147\021\162\024\041\050\142\055\143\001\002\000\030" +
    "\004\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024" +
    "\uffce\050\uffce\051\uffce\054\uffce\055\uffce\001\002\000\044" +
    "\025\057\026\054\027\064\030\055\031\063\033\066\034" +
    "\071\035\061\036\065\037\053\040\067\041\056\042\062" +
    "\044\060\051\uffc9\053\uffc9\054\uffc9\001\002\000\010\051" +
    "\uffcc\053\214\054\uffcc\001\002\000\026\004\005\005\035" +
    "\006\046\007\045\010\034\011\042\024\041\026\043\032" +
    "\032\046\027\001\002\000\044\025\057\026\054\027\064" +
    "\030\055\031\063\033\066\034\071\035\061\036\065\037" +
    "\053\040\067\041\056\042\062\044\060\051\uffc8\053\uffc8" +
    "\054\uffc8\001\002\000\026\004\005\005\035\006\046\007" +
    "\045\010\034\011\042\024\041\026\043\032\032\046\027" +
    "\001\002\000\040\025\057\026\054\027\064\030\055\031" +
    "\063\033\066\034\071\035\061\036\065\037\053\040\067" +
    "\041\056\042\062\044\060\047\220\001\002\000\020\004" +
    "\005\016\151\020\147\021\162\024\041\050\142\055\143" +
    "\001\002\000\030\004\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\024\uffcd\050\uffcd\051\uffcd\054\uffcd\055\uffcd" +
    "\001\002\000\006\004\005\055\226\001\002\000\026\004" +
    "\005\005\035\006\046\007\045\010\034\011\042\024\041" +
    "\026\043\032\032\046\027\001\002\000\064\004\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3\025\057" +
    "\026\054\027\064\030\055\031\063\033\066\034\071\035" +
    "\061\036\065\037\053\040\067\041\056\042\062\044\060" +
    "\050\uffb3\051\uffb3\054\uffb3\055\uffb3\001\002\000\006\043" +
    "\uffb4\053\uffb4\001\002\000\006\043\uffb7\053\uffb7\001\002" +
    "\000\006\043\uffb8\053\uffb8\001\002\000\026\004\005\005" +
    "\035\006\046\007\045\010\034\011\042\024\041\026\043" +
    "\032\032\046\027\001\002\000\026\004\005\005\035\006" +
    "\046\007\045\010\034\011\042\024\041\026\043\032\032" +
    "\046\027\001\002\000\040\025\057\026\054\027\064\030" +
    "\055\031\063\033\066\034\071\035\061\036\065\037\053" +
    "\040\067\041\056\042\062\044\060\045\233\001\002\000" +
    "\006\043\uffaf\044\uffaf\001\002\000\064\004\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\024\uffad\025\057\026" +
    "\054\027\064\030\055\031\063\033\066\034\071\035\061" +
    "\036\065\037\053\040\067\041\056\042\062\044\060\050" +
    "\uffad\051\uffad\054\uffad\055\uffad\001\002\000\006\004\005" +
    "\055\226\001\002\000\006\043\uffb5\053\uffb5\001\002\000" +
    "\010\044\uffba\050\uffba\053\uffba\001\002\000\010\044\026" +
    "\050\uffa5\053\uffa5\001\002\000\006\047\uffa8\053\uffa8\001" +
    "\002\000\010\004\uffac\023\uffac\054\243\001\002\000\006" +
    "\004\uffab\023\uffab\001\002\000\004\002\001\001\002\000" +
    "\006\002\uff9f\004\uff9f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\014\002\003\003\007\012\006\042\011\043" +
    "\010\001\001\000\006\012\006\042\244\001\001\000\002" +
    "\001\001\000\004\012\241\001\001\000\002\001\001\000" +
    "\010\012\006\042\012\043\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\017\026\016\037\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\021\001" +
    "\001\000\004\035\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\030\005\027\006" +
    "\035\007\037\010\032\012\036\032\046\041\043\001\001" +
    "\000\020\004\117\005\027\006\035\007\037\010\032\012" +
    "\036\041\043\001\001\000\020\004\116\005\027\006\035" +
    "\007\037\010\032\012\036\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\051" +
    "\005\027\006\035\007\037\010\032\012\036\041\043\001" +
    "\001\000\002\001\001\000\020\004\107\005\027\006\035" +
    "\007\037\010\032\012\036\041\043\001\001\000\020\004" +
    "\106\005\027\006\035\007\037\010\032\012\036\041\043" +
    "\001\001\000\020\004\105\005\027\006\035\007\037\010" +
    "\032\012\036\041\043\001\001\000\020\004\104\005\027" +
    "\006\035\007\037\010\032\012\036\041\043\001\001\000" +
    "\020\004\103\005\027\006\035\007\037\010\032\012\036" +
    "\041\043\001\001\000\020\004\101\005\027\006\035\007" +
    "\037\010\032\012\036\041\043\001\001\000\020\004\100" +
    "\005\027\006\035\007\037\010\032\012\036\041\043\001" +
    "\001\000\020\004\077\005\027\006\035\007\037\010\032" +
    "\012\036\041\043\001\001\000\020\004\076\005\027\006" +
    "\035\007\037\010\032\012\036\041\043\001\001\000\020" +
    "\004\075\005\027\006\035\007\037\010\032\012\036\041" +
    "\043\001\001\000\020\004\074\005\027\006\035\007\037" +
    "\010\032\012\036\041\043\001\001\000\020\004\073\005" +
    "\027\006\035\007\037\010\032\012\036\041\043\001\001" +
    "\000\020\004\072\005\027\006\035\007\037\010\032\012" +
    "\036\041\043\001\001\000\002\001\001\000\020\004\071" +
    "\005\027\006\035\007\037\010\032\012\036\041\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\111" +
    "\005\027\006\035\007\037\010\032\012\036\040\112\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\115\005\027\006\035\007\037\010\032\012\036\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\123\005\027\006\035\007\037\010\032\011\125\012\036" +
    "\041\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\130\005\027" +
    "\006\035\007\037\010\032\012\036\041\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\017\026\240" +
    "\001\001\000\004\034\133\001\001\000\004\022\140\001" +
    "\001\000\004\033\135\001\001\000\004\035\136\001\001" +
    "\000\002\001\001\000\004\033\236\001\001\000\002\001" +
    "\001\000\040\006\156\012\160\013\144\014\152\015\166" +
    "\016\165\017\143\020\157\022\151\023\154\024\164\026" +
    "\153\027\155\031\163\036\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\211\005\027\006\035\007\037" +
    "\010\032\012\036\021\212\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\156\012\160\013\144\014\152\015\166\016" +
    "\165\017\143\020\174\022\151\024\176\026\153\027\155" +
    "\031\163\036\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\171\005\027\006\035\007\037\010\032\012\036\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\201\005\027\006\035" +
    "\007\037\010\032\012\036\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\204\005\027\006\035" +
    "\007\037\010\032\012\036\041\043\001\001\000\002\001" +
    "\001\000\032\006\156\012\160\013\144\014\152\015\206" +
    "\016\165\017\143\022\151\026\153\027\155\031\163\036" +
    "\145\001\001\000\002\001\001\000\032\006\156\012\160" +
    "\013\144\014\152\015\210\016\165\017\143\022\151\026" +
    "\153\027\155\031\163\036\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\214\005" +
    "\027\006\035\007\037\010\032\012\036\041\043\001\001" +
    "\000\002\001\001\000\020\004\216\005\027\006\035\007" +
    "\037\010\032\012\036\041\043\001\001\000\002\001\001" +
    "\000\032\006\156\012\160\013\144\014\152\015\220\016" +
    "\165\017\143\022\151\026\153\027\155\031\163\036\145" +
    "\001\001\000\002\001\001\000\010\012\017\026\226\030" +
    "\224\001\001\000\020\004\223\005\027\006\035\007\037" +
    "\010\032\012\036\041\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\233\005\027\006\035\007\037\010\032\012\036\041" +
    "\043\001\001\000\020\004\231\005\027\006\035\007\037" +
    "\010\032\012\036\041\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\017\026\226" +
    "\030\235\001\001\000\002\001\001\000\004\035\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @SuppressWarnings("rawtypes")
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		if (t != null)
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public Position span(Position left, Position right){
		return new XiPosition(left.unit(), left.columnStart(), right.columnEnd(), left.lineStart(), right.lineEnd());
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings("all")
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // program ::= program func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode p = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // program ::= func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // program ::= use_list func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode p = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // use_list ::= use_list use_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode l = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)l;
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // use_list ::= use_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // func_decl ::= id OPEN_PAREN func_list CLOSE_PAREN types block 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<XiPrimitiveType> types = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode block = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			FuncDeclNode func_decl = new FuncDeclNode((IdNode)id, list, types, (BlockNode)block, span(id.position(), block.position()));
		RESULT = func_decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // types ::= types COMMA type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<XiPrimitiveType> arr = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = arr;
		arr.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // types ::= COLON type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<XiPrimitiveType>(); RESULT.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // types ::= 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		 RESULT = new ArrayList<XiPrimitiveType>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // func_list ::= func_list COMMA var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func_list ::= var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // use_stmt ::= USE id SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // use_stmt ::= USE id 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_set ::= id_brackets GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_set ::= id GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // id_brackets ::= id_brackets OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListIndexNode base = (ListIndexNode)id;
	   RESULT = new ListIndexNode(base, i, span(base.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // id_brackets ::= allowed_element_assign OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // allowed_element_assign ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // allowed_element_assign ::= id 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var_inst ::= var_list GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// we assume that var_list cannot be empty
		AbstractSyntaxNode n = (AbstractSyntaxNode)(list.get(0));
		InstNode inst = new InstNode(list, e, span(n.position(), e.position()));
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inst",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var_list ::= var_list COMMA var_item 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var_list ::= UNDERSCORE COMMA var_item 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // var_list ::= var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_item ::= UNDERSCORE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnderscoreNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_item ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bracket_list ::= bracket_list OPEN_BRACKET dimension CLOSE_BRACKET 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode t = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	if (arr == null) arr = new ArrayList<VisualizableTreeNode>();
		arr.add(t);
		RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bracket_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// check that arr is empty
		DeclNode decl = new DeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dimension ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode o = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dimension ::= 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= BOOL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= INT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt_list ::= stmt_list block_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode list = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)list;
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt_list ::= block_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = new BlockNode(null);
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // block_stmt ::= stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // block_stmt ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // block ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode stmts = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // block ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode stmts = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // block ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
	   ((BlockNode)RESULT).add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block ::= OPEN_BRACE CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // return_list ::= return_list COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode list = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)list;
		r.add(expr); 
		r.position = span(r.position, expr.position());
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // return_list ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = new ReturnNode();
		r.add(expr);
		r.position = expr.position();
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // return_stmt ::= return_stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // return_stmt ::= RETURN 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ReturnNode r = new ReturnNode(); 
		r.position = t.position(); 
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // return_stmt ::= RETURN return_list 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)s; 
		r.position = span(t.position(), s.position()); 
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileNode(e, s, span(t.position(), s.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode s1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e, s1, s2, span(t.position(), s2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e1, stmt, null, span(t.position(), stmt.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt_or_block ::= block 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt_or_block ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= var_set 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= var_inst 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= block 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode b = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureCallNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= BREAK 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BreakNode(b.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= while_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= if_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arr_elements ::= arr_elements COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListNode)arr).add(expr); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arr_elements ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListNode list = new ListNode(expr.position()); list.add(expr); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arr_create ::= OPEN_PAREN expr COMMA arr_elements CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
		ListNode tl = (ListNode)arr;
		for (VisualizableTreeNode n : tl.children()) list.add((AbstractSyntaxNode)n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arr_create ::= OPEN_PAREN expr COMMA CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arr_create ::= OPEN_PAREN CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token t = (Token)o, t2 = (Token)e; RESULT = new ListNode(span(o.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arr_index ::= expr OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(expr, i, span(expr.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_index",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // func_callargs ::= func_callargs COMMA expr 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // func_callargs ::= expr 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VisualizableTreeNode> args = new ArrayList<VisualizableTreeNode>(); args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // func_callargs ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // func_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t1 = (Token)len, t2 = (Token)o;
		RESULT = new LengthNode(expr, span(t1.position(), t2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // func_call ::= id OPEN_PAREN func_callargs CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t = (Token)o;
		RESULT = new FuncCallNode((IdNode)id, args, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // uop ::= MINUS 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNegNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // uop ::= NOT 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNotNode(t.position());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= id 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= arr_create 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= arr_index 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= bool_literal 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode b = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= STRING_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token tok = (Token)s;
		Position p = tok.position();
		RESULT = new StringLiteralNode(tok.value(), p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= CHARACTER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		int v = (int)(tok.value().charAt(0));
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= INTEGER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		int v = Integer.parseInt(tok.value());
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= uop expr 
            {
              AbstractSyntaxNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode op = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = op; 
		if (op instanceof UnNegNode)
			((UnNegNode)op).set(e, span(op.position(), e.position())); 
		else
			((UnNotNode)op).set(e, span(op.position(), e.position()));
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MODULO expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MODULO");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr DIVIDE expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("DIVIDE");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr TIMES expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("TIMES");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr MINUS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MINUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr PLUS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("PLUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr GT expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr LT expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr GEQ expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr LEQ expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr NOT_EQUAL expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("NOT_EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr EQUAL expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr OR expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("OR");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr AND expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("AND");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id ::= IDENTIFIER 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bool_literal ::= FALSE 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(false, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bool_literal ::= TRUE 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(true, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode start_val = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

