
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 19 15:19:57 EDT 2011
//----------------------------------------------------

package cs4120.lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.lg342.xi.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 19 15:19:57 EDT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\033\003\000\002\033" +
    "\003\000\002\013\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\006\000\002\006\006" +
    "\000\002\007\002\000\002\007\003\000\002\007\005\000" +
    "\002\010\006\000\002\011\004\000\002\011\006\000\002" +
    "\011\007\000\002\012\003\000\002\012\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\007\000\002" +
    "\015\011\000\002\016\007\000\002\017\004\000\002\020" +
    "\003\000\002\020\005\000\002\021\004\000\002\021\005" +
    "\000\002\023\003\000\002\023\004\000\002\022\003\000" +
    "\002\022\004\000\002\031\003\000\002\031\003\000\002" +
    "\024\006\000\002\032\002\000\002\032\005\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\027\005" +
    "\000\002\025\005\000\002\030\005\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\022\004\013\014\014\016\011\017\024\020" +
    "\012\022\025\046\005\053\004\001\002\000\006\041\uffbd" +
    "\051\uffbd\001\002\000\024\004\013\014\014\016\011\017" +
    "\024\020\012\022\025\046\005\047\155\053\004\001\002" +
    "\000\032\002\uffd7\004\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\022\uffd7\046\uffd7\047\uffd7\052\uffd7\053\uffd7" +
    "\001\002\000\006\041\147\051\146\001\002\000\006\041" +
    "\uffbc\051\uffbc\001\002\000\004\044\142\001\002\000\026" +
    "\004\013\005\036\006\037\007\050\010\035\011\041\022" +
    "\025\024\032\030\046\044\040\001\002\000\102\002\ufffe" +
    "\004\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000" +
    "\004\044\130\001\002\000\004\002\127\001\002\000\032" +
    "\002\uffd3\004\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\022\uffd3\046\uffd3\047\uffd3\052\uffd3\053\uffd3\001\002" +
    "\000\036\002\uffd2\004\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\022\uffd2\041\uffbe\046\uffd2\047\uffd2\051\uffbe" +
    "\052\uffd2\053\uffd2\001\002\000\032\002\uffd1\004\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\046\uffd1" +
    "\047\uffd1\052\uffd1\053\uffd1\001\002\000\032\002\uffd4\004" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4" +
    "\046\uffd4\047\uffd4\052\uffd4\053\uffd4\001\002\000\032\002" +
    "\uffd6\004\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\022\uffd6\046\uffd6\047\uffd6\052\uffd6\053\uffd6\001\002\000" +
    "\010\041\115\044\105\050\116\001\002\000\032\002\uffd5" +
    "\004\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022" +
    "\uffd5\046\uffd5\047\uffd5\052\uffd5\053\uffd5\001\002\000\004" +
    "\044\031\001\002\000\032\002\uffd0\004\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\046\uffd0\047\uffd0" +
    "\052\uffd0\053\uffd0\001\002\000\032\002\uffd8\004\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\046\uffd8" +
    "\047\uffd8\052\uffd8\053\uffd8\001\002\000\004\002\uffb8\001" +
    "\002\000\026\004\013\005\036\006\037\007\050\010\035" +
    "\011\041\022\025\024\032\030\046\044\040\001\002\000" +
    "\026\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\022\uffe4\024\uffe4\030\uffe4\044\uffe4\001\002\000\072\002" +
    "\ufff6\004\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\001\002\000\076\002\ufff4\004\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\042\104\043" +
    "\ufff4\044\105\045\ufff4\046\ufff4\047\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\001\002\000\072\002\000\004\000\014\000\015" +
    "\000\016\000\017\000\020\000\022\000\023\000\024\000" +
    "\025\000\026\000\027\000\031\000\032\000\033\000\034" +
    "\000\035\000\036\000\037\000\040\000\043\000\045\000" +
    "\046\000\047\000\051\000\052\000\053\000\001\002\000" +
    "\072\002\ufff8\004\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\001\002\000\072\002\ufff9\004\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\043" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\001\002\000\030\004\013\005\036\006\037\007\050\010" +
    "\035\011\041\022\025\024\032\030\046\044\040\045\073" +
    "\001\002\000\072\002\uffff\004\uffff\014\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\043\uffff\045\uffff\046\uffff" +
    "\047\uffff\051\uffff\052\uffff\053\uffff\001\002\000\072\002" +
    "\ufff5\004\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\043\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\001\002\000\072\002\ufffb\004\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\043\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002" +
    "\000\072\002\ufff7\004\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\001\002\000\036\023\056\024" +
    "\053\025\063\026\054\027\062\031\064\032\067\033\060" +
    "\034\065\035\052\036\066\037\055\040\061\045\071\001" +
    "\002\000\026\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\022\uffe5\024\uffe5\030\uffe5\044\uffe5\001\002\000" +
    "\026\004\013\005\036\006\037\007\050\010\035\011\041" +
    "\022\025\024\032\030\046\044\040\001\002\000\072\002" +
    "\ufffa\004\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\001\002\000\072\002\ufffc\004\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\022\ufffc\023\056\024" +
    "\053\025\063\026\054\027\062\031\064\032\067\033\060" +
    "\034\065\035\052\036\066\037\055\040\061\043\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002" +
    "\000\026\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\022\ufff2\024\ufff2\030\ufff2\044\ufff2\001\002\000\026" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\022" +
    "\uffe9\024\uffe9\030\uffe9\044\uffe9\001\002\000\026\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\022\uffe7\024" +
    "\uffe7\030\uffe7\044\uffe7\001\002\000\026\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\022\ufff0\024\ufff0\030" +
    "\ufff0\044\ufff0\001\002\000\026\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\022\uffea\024\uffea\030\uffea\044" +
    "\uffea\001\002\000\026\004\013\005\036\006\037\007\050" +
    "\010\035\011\041\022\025\024\032\030\046\044\040\001" +
    "\002\000\026\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\022\uffeb\024\uffeb\030\uffeb\044\uffeb\001\002\000" +
    "\026\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\022\uffef\024\uffef\030\uffef\044\uffef\001\002\000\026\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\022\uffe6" +
    "\024\uffe6\030\uffe6\044\uffe6\001\002\000\026\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\022\uffe8\024\uffe8" +
    "\030\uffe8\044\uffe8\001\002\000\026\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\022\uffec\024\uffec\030\uffec" +
    "\044\uffec\001\002\000\026\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\022\uffed\024\uffed\030\uffed\044\uffed" +
    "\001\002\000\026\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\022\ufff1\024\ufff1\030\ufff1\044\ufff1\001\002" +
    "\000\026\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\022\uffee\024\uffee\030\uffee\044\uffee\001\002\000\072" +
    "\002\ufffd\004\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\022\ufffd\023\056\024\053\025\063\026\054\027\062" +
    "\031\064\032\067\033\060\034\065\035\052\036\066\037" +
    "\055\040\061\043\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\001\002\000\072\002\uffe2\004\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\043\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2\001" +
    "\002\000\040\023\056\024\053\025\063\026\054\027\062" +
    "\031\064\032\067\033\060\034\065\035\052\036\066\037" +
    "\055\040\061\045\075\051\074\001\002\000\072\002\uffdd" +
    "\004\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\001\002\000\030\004\013\005\036\006\037\007" +
    "\050\010\035\011\041\022\025\024\032\030\046\044\040" +
    "\045\077\001\002\000\072\002\ufff3\004\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\043\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002\000" +
    "\040\023\056\024\053\025\063\026\054\027\062\031\064" +
    "\032\067\033\060\034\065\035\052\036\066\037\055\040" +
    "\061\045\uffda\051\uffda\001\002\000\072\002\uffdc\004\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\043" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\001\002\000\006\045\102\051\101\001\002\000\026\004" +
    "\013\005\036\006\037\007\050\010\035\011\041\022\025" +
    "\024\032\030\046\044\040\001\002\000\072\002\uffdb\004" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\043\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\001\002\000\040\023\056\024\053\025\063\026\054" +
    "\027\062\031\064\032\067\033\060\034\065\035\052\036" +
    "\066\037\055\040\061\045\uffd9\051\uffd9\001\002\000\026" +
    "\004\013\005\036\006\037\007\050\010\035\011\041\022" +
    "\025\024\032\030\046\044\040\001\002\000\032\004\013" +
    "\005\036\006\037\007\050\010\035\011\041\022\025\024" +
    "\032\030\046\044\040\045\uffe1\051\uffe1\001\002\000\040" +
    "\023\056\024\053\025\063\026\054\027\062\031\064\032" +
    "\067\033\060\034\065\035\052\036\066\037\055\040\061" +
    "\045\uffe0\051\uffe0\001\002\000\006\045\111\051\110\001" +
    "\002\000\026\004\013\005\036\006\037\007\050\010\035" +
    "\011\041\022\025\024\032\030\046\044\040\001\002\000" +
    "\072\002\uffe3\004\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\001\002\000\040\023\056\024\053" +
    "\025\063\026\054\027\062\031\064\032\067\033\060\034" +
    "\065\035\052\036\066\037\055\040\061\045\uffdf\051\uffdf" +
    "\001\002\000\036\023\056\024\053\025\063\026\054\027" +
    "\062\031\064\032\067\033\060\034\065\035\052\036\066" +
    "\037\055\040\061\043\114\001\002\000\072\002\uffde\004" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\043\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053" +
    "\uffde\001\002\000\026\004\013\005\036\006\037\007\050" +
    "\010\035\011\041\022\025\024\032\030\046\044\040\001" +
    "\002\000\006\012\121\013\120\001\002\000\040\002\uffc0" +
    "\004\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\022" +
    "\uffc0\041\uffc0\042\122\046\uffc0\047\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\001\002\000\040\002\uffc2\004\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\041\uffc2\042\uffc2" +
    "\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\001\002\000" +
    "\040\002\uffc3\004\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\022\uffc3\041\uffc3\042\uffc3\046\uffc3\047\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\001\002\000\004\043\124\001\002" +
    "\000\036\002\uffc1\004\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\022\uffc1\041\uffc1\046\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\001\002\000\040\002\uffc0\004\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\022\uffc0\041\uffc0" +
    "\042\122\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\001" +
    "\002\000\036\002\uffbf\004\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\022\uffbf\041\uffbf\046\uffbf\047\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\001\002\000\064\002\uffb9\004\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9\023" +
    "\056\024\053\025\063\026\054\027\062\031\064\032\067" +
    "\033\060\034\065\035\052\036\066\037\055\040\061\046" +
    "\uffb9\047\uffb9\052\uffb9\053\uffb9\001\002\000\004\002\001" +
    "\001\002\000\026\004\013\005\036\006\037\007\050\010" +
    "\035\011\041\022\025\024\032\030\046\044\040\001\002" +
    "\000\036\023\056\024\053\025\063\026\054\027\062\031" +
    "\064\032\067\033\060\034\065\035\052\036\066\037\055" +
    "\040\061\045\132\001\002\000\022\004\013\014\014\016" +
    "\011\017\024\020\012\022\025\046\005\053\004\001\002" +
    "\000\032\002\uffcf\004\uffcf\014\uffcf\015\134\016\uffcf\017" +
    "\uffcf\020\uffcf\022\uffcf\046\uffcf\047\uffcf\052\uffcf\053\uffcf" +
    "\001\002\000\022\004\013\014\014\016\011\017\024\020" +
    "\012\022\025\046\005\053\004\001\002\000\032\002\uffce" +
    "\004\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022" +
    "\uffce\046\uffce\047\uffce\052\uffce\053\uffce\001\002\000\066" +
    "\002\uffcb\004\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\022\uffcb\023\056\024\053\025\063\026\054\027\062" +
    "\031\064\032\067\033\060\034\065\035\052\036\066\037" +
    "\055\040\061\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\001\002\000\034\002\uffcc\004\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\022\uffcc\046\uffcc\047\uffcc\051\140" +
    "\052\uffcc\053\uffcc\001\002\000\026\004\013\005\036\006" +
    "\037\007\050\010\035\011\041\022\025\024\032\030\046" +
    "\044\040\001\002\000\066\002\uffca\004\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\022\uffca\023\056\024\053" +
    "\025\063\026\054\027\062\031\064\032\067\033\060\034" +
    "\065\035\052\036\066\037\055\040\061\046\uffca\047\uffca" +
    "\051\uffca\052\uffca\053\uffca\001\002\000\026\004\013\005" +
    "\036\006\037\007\050\010\035\011\041\022\025\024\032" +
    "\030\046\044\040\001\002\000\036\023\056\024\053\025" +
    "\063\026\054\027\062\031\064\032\067\033\060\034\065" +
    "\035\052\036\066\037\055\040\061\045\144\001\002\000" +
    "\022\004\013\014\014\016\011\017\024\020\012\022\025" +
    "\046\005\053\004\001\002\000\032\002\uffcd\004\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd\046\uffcd" +
    "\047\uffcd\052\uffcd\053\uffcd\001\002\000\006\004\013\053" +
    "\004\001\002\000\026\004\013\005\036\006\037\007\050" +
    "\010\035\011\041\022\025\024\032\030\046\044\040\001" +
    "\002\000\064\002\uffba\004\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\022\uffba\023\056\024\053\025\063\026" +
    "\054\027\062\031\064\032\067\033\060\034\065\035\052" +
    "\036\066\037\055\040\061\046\uffba\047\uffba\052\uffba\053" +
    "\uffba\001\002\000\006\041\uffbb\051\uffbb\001\002\000\006" +
    "\041\uffbe\051\uffbe\001\002\000\004\050\116\001\002\000" +
    "\024\004\013\014\014\016\011\017\024\020\012\022\025" +
    "\046\005\047\161\053\004\001\002\000\032\002\uffc9\004" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9" +
    "\046\uffc9\047\uffc9\052\uffc9\053\uffc9\001\002\000\024\004" +
    "\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\046\uffc5" +
    "\047\uffc5\053\uffc5\001\002\000\026\004\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\022\uffc7\046\uffc7\047\uffc7\052\160" +
    "\053\uffc7\001\002\000\024\004\uffc6\014\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\022\uffc6\046\uffc6\047\uffc6\053\uffc6\001\002" +
    "\000\032\002\uffc8\004\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\022\uffc8\046\uffc8\047\uffc8\052\uffc8\053\uffc8" +
    "\001\002\000\024\004\uffc4\014\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\022\uffc4\046\uffc4\047\uffc4\053\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\034\002\014\006\020\013\022\014\027\015" +
    "\026\016\005\017\021\021\015\024\016\025\017\026\007" +
    "\027\006\030\025\001\001\000\002\001\001\000\036\006" +
    "\020\013\022\014\156\015\026\016\005\017\021\021\015" +
    "\022\153\023\155\024\016\025\017\026\007\027\006\030" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\135\005\046\006" +
    "\042\010\032\011\041\013\033\020\136\033\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\044\005\046\006\042\010" +
    "\032\011\041\013\033\033\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\071\005\046" +
    "\006\042\010\032\011\041\013\033\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\056\001\001\000\002\001\001\000" +
    "\020\003\050\005\046\006\042\010\032\011\041\013\033" +
    "\033\043\001\001\000\002\001\001\000\004\004\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\067\005" +
    "\046\006\042\010\032\011\041\013\033\033\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\056\001\001\000" +
    "\002\001\001\000\004\004\056\001\001\000\002\001\001" +
    "\000\022\003\075\005\046\006\042\010\032\011\041\012" +
    "\077\013\033\033\043\001\001\000\002\001\001\000\004" +
    "\004\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\102\005\046\006\042\010\032\011\041\013\033" +
    "\033\043\001\001\000\002\001\001\000\004\004\056\001" +
    "\001\000\020\003\112\005\046\006\042\010\032\011\041" +
    "\013\033\033\043\001\001\000\022\003\105\005\046\006" +
    "\042\007\106\010\032\011\041\013\033\033\043\001\001" +
    "\000\004\004\056\001\001\000\002\001\001\000\020\003" +
    "\111\005\046\006\042\010\032\011\041\013\033\033\043" +
    "\001\001\000\002\001\001\000\004\004\056\001\001\000" +
    "\004\004\056\001\001\000\002\001\001\000\020\003\125" +
    "\005\046\006\042\010\032\011\041\013\033\033\043\001" +
    "\001\000\004\031\116\001\001\000\004\032\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\124\001\001\000\002\001\001" +
    "\000\004\004\056\001\001\000\002\001\001\000\020\003" +
    "\130\005\046\006\042\010\032\011\041\013\033\033\043" +
    "\001\001\000\004\004\056\001\001\000\032\006\020\013" +
    "\022\014\132\015\026\016\005\017\021\021\015\024\016" +
    "\025\017\026\007\027\006\030\025\001\001\000\002\001" +
    "\001\000\032\006\020\013\022\014\134\015\026\016\005" +
    "\017\021\021\015\024\016\025\017\026\007\027\006\030" +
    "\025\001\001\000\002\001\001\000\004\004\056\001\001" +
    "\000\002\001\001\000\020\003\140\005\046\006\042\010" +
    "\032\011\041\013\033\033\043\001\001\000\004\004\056" +
    "\001\001\000\020\003\142\005\046\006\042\010\032\011" +
    "\041\013\033\033\043\001\001\000\004\004\056\001\001" +
    "\000\032\006\020\013\022\014\144\015\026\016\005\017" +
    "\021\021\015\024\016\025\017\026\007\027\006\030\025" +
    "\001\001\000\002\001\001\000\010\013\152\024\151\026" +
    "\150\001\001\000\020\003\147\005\046\006\042\010\032" +
    "\011\041\013\033\033\043\001\001\000\004\004\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\020\013\022\014\156\015\026\016\005\017" +
    "\021\021\015\023\161\024\016\025\017\026\007\027\006" +
    "\030\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // program ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_set ::= id GETS expr 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_inst ::= var_list GETS expr 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inst",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_list ::= var_list COMMA var_item 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var_list ::= var_item 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // var_item ::= UNDERSCORE 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var_item ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bracket_list ::= OPEN_BRACKET CLOSE_BRACKET bracket_list 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bracket_list ::= 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= BOOL 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= INT 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt_list ::= stmt_list block_stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt_list ::= block_stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // block_stmt ::= stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block_stmt ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block ::= OPEN_BRACE CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // return_list ::= return_list COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // return_list ::= expr 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // return_stmt ::= RETURN return_list 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt ELSE stmt 
            {
              AbstractSyntaxNode RESULT =null;
		 System.out.println("else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= var_set 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= var_inst 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= block 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= BREAK 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= return_stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= while_stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= if_stmt 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arr_elements ::= arr_elements COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListNode)arr).add(expr); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arr_elements ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListNode list = new ListNode(expr.position()); list.add(expr); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arr_create ::= OPEN_PAREN expr COMMA arr_elements CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  Token t = (Token)o; 
		ListNode list = new ListNode(t.position()); 
		list.add(expr);
		RESULT = list;
		ListNode tl = (ListNode)arr;
		for (VisualizableTreeNode n : tl.children()) list.add((AbstractSyntaxNode)n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arr_create ::= OPEN_PAREN expr COMMA CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  Token t = (Token)o; 
		ListNode list = new ListNode(t.position()); 
		list.add(expr);
		RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arr_create ::= OPEN_PAREN CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Token t = (Token)o; RESULT = new ListNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arr_index ::= id OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ListIndexNode((IdNode)id, expr, id.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_index",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // func_callargs ::= func_callargs COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode args = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((CallArgsNode)args).add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // func_callargs ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 CallArgsNode args = new CallArgsNode(expr.position()); args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // func_callargs ::= 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // func_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object len = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			Token t = (Token)len;
		RESULT = new LengthNode(expr, t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // func_call ::= id OPEN_PAREN func_callargs CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode args = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncCallNode((IdNode)id, (CallArgsNode)args, id.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // uop ::= MINUS 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new UnNegNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // uop ::= NOT 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new UnNotNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op ::= MODULO 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("MODULO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op ::= DIVIDE 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("DIVIDE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op ::= TIMES 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("TIMES"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op ::= MINUS 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("MINUS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op ::= PLUS 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("PLUS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op ::= GT 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("GT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op ::= LT 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("LT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= GEQ 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("GEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op ::= LEQ 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("LEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op ::= NOT_EQUAL 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("NOT_EQUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op ::= EQUAL 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("EQUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op ::= OR 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op ::= AND 
            {
              AbstractSyntaxNode RESULT =null;
		 RESULT = new BinNode("AND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= id 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= arr_create 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= arr_index 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= bool_literal 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode b = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= STRING_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token tok = (Token)s;
		Position p = tok.position();
		RESULT = new StringLiteralNode(tok.value(), p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= CHARACTER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		int v = (int)(tok.value().charAt(0));
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= INTEGER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		int v = Integer.parseInt(tok.value());
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; System.out.println(e.label()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= uop expr 
            {
              AbstractSyntaxNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode op = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = op; 
		if (op instanceof UnNegNode)
			((UnNegNode)op).set(e, e.position()); 
		else
			((UnNotNode)op).set(e, e.position());
		System.out.println(op.label());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr op expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode op = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = op; 
		((BinNode)op).set(e1, e2, e1.position()); 
		System.out.println(op.label());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id ::= IDENTIFIER 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bool_literal ::= FALSE 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(false, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bool_literal ::= TRUE 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(true, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode start_val = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

